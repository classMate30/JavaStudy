/*=======================================================================
   ■■■ 클래스와 인스턴스 ■■■
   - 생성자(constructor) 와 초기화 블럭(Initialized Block)

   초기화 블럭보다 생성자가 힘이 더 세다!!!!!!!
=======================================================================*/

public class Test078
{	//클래스의 영역
	/*
	int n;		[O]			//자동으로 0초기화 지원해준것임
	int m;		[O]			//전역변수에선 자바가 자동으로 0으로 초기화 해줬음


	//n=100;	[X]//컴파일 에러 why...?	메소드의 영역과 클래스의 영역 구분
	///m=200;	[X]//우리가 어떤 연산을 수행했다면 그건 모두 메소드의 영역에서 했음
			       //자바가 이미 선언시 0으로 초기화했기때문에 이것은 연산임
				   //별도의 값을 대입 연산하는것이지 초기화 한다고 표현 안함
	*/

	/*					//수행가능
	int n = 100;	[O]	//선언과 동시에 초기화 하는 구문이기에 가능
	int m = 200;	[O]	//
	*/

	int n;
	int m;
	
	// 생성자(Constructor) → 초기화 블럭이 코드를 먼저 수행했다 하더라도
	//						  최종적으로 해당 멤버들의 초기화 값을 결정하게 되는 것은
	//						  하하하...생성자~!!!!

	Test078()
	{		
		n=100;
		m=200;
		System.out.println("생성자 실행...");
	}

	// 초기화 블럭(Initialized Block)
	{				//클래스영역 안에서 brace{} 하나로 되어졌음
		n=10;
		m=20;
		System.out.println("초기화 블럭 실행...");

	}

	Test078(int n, int m)
	{
		this.n = n;
		this.m = m;
		System.out.println("매개 변수 있는 생성자 실행...");
	}

	//생성자(Constructor)
	/*
	Test078()
	{		
		n=100;
		m=200;
		System.out.println("생성자 실행...");
	}
	*/
	//멤버 출력 메소드 정의
	void write()
	{
		System.out.println("n:" + n + ",m" + m);
	}

	public static void main(String[] args)
	{
		Test078 ob1 = new Test078();
		ob1.write();
		
		Test078 ob2 = new Test078(1234,2345);
		ob2.write();
		

		
	}
}


//실행 결과
//초기화 블럭은 항상 10 과 20을 초기화 하고 있지만 생성자가 힘이 더세니 계속 생성자의 초기화 적용중
/*
초기화 블럭 실행...
생성자 실행...
n:100,m200
초기화 블럭 실행...
매개 변수 있는 생성자 실행...
n:1234,m2345
계속하려면 아무 키나 누르십시오 . . .
