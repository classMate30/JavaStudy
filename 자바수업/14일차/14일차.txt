자바 배열의 핵심
자바 안에서 다루는 배열은 다른 언어에서 다루는 배열이랑 다르다.
1.자바는 동질의 성질을 가진 애들을 모아둔다.
2.배열의 길이는 바꿀 수 없다.

//※ 배열 변수의 복사에는 데이터 복사, 주소값 복사 두 가지 형태가 존재한다.
//	 주소값 복사 → 얕은 복사
//	 원본을 수정하면 복사본에 영향을 미치게 되는 복사 방법
//	 (자바의 배열 뿐 아니라 모든 참조형 데이터에 해당하는 복사 방법)

//	 데이터 복사 → 깊은 복사
//	 실제 요소로 들어있는 값에 대한 복사로
//	 원본을 수정해도 복사본에 영향을 미치지 않는 복사 방법






ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[9장] 접근제어 지시자와 정보은닉, 그리고 ★★★★★캡슐화★★★★★

□접근제어 지시자 == 접근제어자 == 접근지시자 == 접근지정자 == 접근제한자 (같은 말)

<우리가 여태까지 해왔었던 설계들>
public class 클래스명  					← public
{
}
class 클래스명								← (default)
{
}

public static void main(String[] args) 	← public
{
}
void print(int a, int b)					← (default)
{
}

★접근제어 지시자 : 접근을 제한하기 위해서 존재함★
  (클래스/메소드/변수에 붙일 수 있음)

지시자		클래스 내부 		동일 패키지			상속받은 클래스		이외의 영역
private			O		  X					X		      X
(default)		O		  O					X     		      X							
protected		O		  O					O		      X
public			O		  O					O		 O

□proteceted 	/	default 		상속받은 클래스차이?
아버지가 어느날 안방으로 불러서 우리 가족 대대로 물려온 가보가 액자 뒤 금고안에 있으니
우리 같이 지키자!라고 말하심. 가보는 protected돼야 한다. 그럼 여기에 자식인 나는 접근할 수 있다
아무말도 없는 (default)는 아버지가 아무 말씀 없는거니 자식도 접근할 수 없다.

□굳이 안써도 될 지점에 proteceted라고 써놓은 거는, 어떻게든 자식한테는 접근 할 수 있는
  기회의 여지를 준것이니 protected를 보면 상속을 떠올리는 것은 좋은 방법임.


ㅡㅡ----------------------ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
정보은닉(Information Hiding)
class안에 직접선언하게 되는 멤버 변수들은 private을써서 안에서만 접근하게 허용함으로써 밖에서는 접근 못하게 제한 해둠 ex)
class 커피자판기
{
	private 물통					//외부에 접근 금지
	private 커피통					//미시적인 관점에선 이것 자체를 캡슐화라고 부르기도함
	private 설탕통			
	private 프림통
	private 돈통
	private 거스름통
		:

	get물통()			
	{
		return this.물통;		//직접 물통에 접근하지말고 나를 이용해 (나중에 배운다함)
	}

	set물통()
	{
		this.물통=물;
	}
	public 밀크커피 주문버튼 누르기()
	{	
		
		밀크커피 레시피
		......;
	}
}
class 이용자
{
	main()
	{
		커피자판기 ob = new 커피자판기();
		ob.물통 -= 300;				        //직접 접근하는 것을 막아야함
		ob.커피통 += 500;				//성악설, 맘대로 가져 갈 수 있음
	
	}

}


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

<거시적으로 이해해보는 캡슐화>

□덧셈 뺄셈 곱셈 나눗셈 계산기를 따로 가지고 있지 않음,하나의 디바이스 안에 다 있음
  연산에 대해서 모르는 사람은 덧셈 뺄셈 곱셈 나눗셈 계산기가 따로 있다면, 연산의 결과를 어떻게 알맞게 도출 해내는지 모름
  감기약이 따로 있으면, 잘 모르는 사람은 해당약들 복용시에 생기는 문제가 있으며, 뭘 먹어야할지 모를 수 있음



□캡슐화 : 합쳐라! 캡슐화는 개념적인 의미의 묶음을 의미한다.
  그래야 전체 규칙을 적용 할 수있고, 계산을 모르는 사람도 가이드라인에 
  맞게끔 계산 결과를 얻어 낼 수있고, 약을 뭘 복용할지 모르는 사람도 하나만 복용해도 해결됨



그러나 객체지향 관점에서 우리가 클래스를 설계하는 과정은 나누고 쪼개고 분리하는 과정을 추구하는데
이 두개가 상충되고 정답이라는게 존재 하지 않기에 어렵다고 설명하심
★이 두개 사이의 균형점을 찾아 나가는 것이 핵심★

