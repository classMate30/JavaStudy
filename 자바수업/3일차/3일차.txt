복습
※cmd
 ○(일반적)ctrl+c = Enter (cmd내에선 블럭잡고 엔터치면 복사됨) 
                          (->요즘엔 운영체제에서 ctrl+c지원되기도함)
 ○cmd내에서 path등록하면, cmd상에서 cd\로 c로 이동한다음에 
   java 와 javac를 입력했을때 프로그램이 돌아야함

  ○이름() -> 함수(메소드) 메소드는 클래스 안에서만 존재, 함수는 아님
    이름() -> 함수(메소드) 정의
    {
 	  ...
    }
    이름(); -> 함수(메소드) 호출
 ※자바에서 함수는 독립적으로 존재 할 수 없고,클래스에 정의되는 형태로 만들어져야함
  
  ○System.out.println("Welcome to Java");   -> println(); 은 함수를 호출한 것
  
  	『System』이라는 도구상자 안의 『out』을꺼내서  println()을 쓰는 형태
  	->System이라는 도구상자 안의
  	->out이라는 도구상자 안의
  	->println()이라는 도구 즉 메소드를 호출
  	->System 클래스의 out 객체의 println() 메소드
  	ex)구급상자.내복약.감기약();

06/29

○
  □실행의 대상은 클래스 파일이므로, 오류가 있을시 수정사항이 있을 시 모두 컴파일 필수
  

  □println ln(line skip = 개행(줄바꿈)포함 출력도구) / print(출력도구) 둘이 다른 도구 상자
    에서 꺼냈다는 것을 시각화해서 인지 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ>>

○주석은 컴파일에서 제외?
.java에 저장된 용량은 주석이 있는게 용량이 더 큰게 맞지만
우리가 실제 배포하는 파일은 .class파일이고, class파일의 용량은 같았다.
▶컴파일 하면 알 수 있듯 주석은 용량차지x, 프로그램 속도에 영향이 없다.친절하게 주석달 것


○1/1.0/'1'/"1"
1=정수 , 1.0=실수, '1'=문자 , "1"=문자열
우리가 보기엔 다 똑같은 1이지만 컴퓨터가 인식하기엔 모두 다르다.



○변수와 메모리
※메모리에 대한 이해
 □컴퓨터는 모든 데이터를 모두 1,0의 형태로 저장
   규칙이 무너지면 컴퓨터는 이 데이터를 표현 할 방법이 없음
   텍스트(일기),이미지,음악,영상 등 사람이 기억하는 방식과 달리
   컴퓨터는 0과 1로 변환해서 저장해서 기억하고 있음


 □저장하고자 하는 데이터의 유형과 용량이 중요하다
 ex) 식당에 가서 저희 10명인데 1번 테이블, 간장종지에 수박 담은 자리로 예약해주세요 
     대신, 저희 10명 예약이요. 하는 것과 같은 이치

 □언어레벨에서 이름만 기억하면 처리 가능하게 해줌, 주소는 기억할 필요 없음
 ex) 우리가 시청의 이름만 알면 찾아갈 수 있듯이 , 실제 시청 주소를 기억 할 필요x 


 □가비지컬랙터(garbage collector):사용한 메모리공간들을 팩맨처럼 먹어치우면서 회수한다



※변수 : 변하는 수(데이터)를 저장할 공간
 □ 변수는 선언 하는 것! 


○자료형의 종류와 구분	
자료형			데이터	 	메모리크기		표현가능범위
boolean 		참과 거짓	1 바이트		true, false

char			문자		2 바이트		모든 유니코드 문자

byte			정수		1 바이트 		-128~127
short			정수		2바이트		-32768~32767
int				정수		4바이트		-2147483648~2147483647
long			정수		8바이트		-9223372036854775808~9223372036854775807

float			실수		4바이트		±(1.40*10^-45 ~ 3.40*10^38)
double			실수		8바이트		±(4.94*10^-324 ~ 1.79*10^308)
외울필요x
==============================================================================

□ 1bit에는 0과1만 담김
□□□□□□□□ 8bit =1byte

==============================================================================

2진수와 10진수

10진수: 우리가 원래 숫자를 사용하던 방식
2진수: 숫자를 2진법으로 표현한 방식
비트열에서 부호비트가 0이면 양수 1이면 음수!

○음수의 표현

□음수: 양수 a에 대해 음수-a를 더하면 0
□음수만드려면 :2의 보수를 취한다 		┌①1의 보수를 취함(비트열 반전)
				                     	│
				                     	└②1을 더한다

[A] 10진수 대상 양수...비트열
	1. 1의 보수(비트열 반전)
	↓
	2. 1을 더함
	↓
	음수

    10진수 대상 음수...비트열   
	1. 1을 뺌
	↓
	2. 1의 보수(비트열 반전)     ※역순으로 진행한 방식
	↓
	양수

[B] 10진수 대상 양수...비트열
	1. 1의 보수(비트열 반전)
	↓
	2. 1을 더함
	↓
	음수

    10진수 대상 음수...비트열	    
	1. 1의 보수(비트열 반전)
	↓
	2. 1을 더함
	↓
	양수

※음수에서 양수를 만들때 비트열에서 -1을 해주고 반전시키나
  비트열 반전 해서 +1을 해주나  값은 같다. 편한방식 사용!

==============================================================================

○실수의 표현

0과 1사이의 실수만 해도 수가 무한대
바이트(메모리)로 모든 실수의 표현은 불가능
ex)0.00000000000000000000.........00000.........000......무한대...... 표현 불가능......

★근사치를 메모리에 저장하는 방식 채택

==============================================================================
○ 변수
   int num=20; 
->의미: int형 타입 변수num에 20을 넣는다.
★Why?★ 
20은 byte로 표현해도 되는데 왜 우리는 일반적으로 int에 선언하라고 배웠나?

<정수는>
java 처음 설계할때 구조가
32비트 환경으로 만들어짐 -> 32비트 기반 연산(4바이트 기반 연산)
그러므로 4바이트 기반(int)으로 연산 수행
★연산★이 핵심임!




<실수는>
같은 논리라면 float을 써야 하지만, 정밀함 고려하여 double사용!
==============================================================================
○ 변수
<문자는> 
char c='A'   
2바이트= 16비트□□□□□□□□ □□□□□□□□
		0 0 0 0 0 0 0 0  0 1 0 0 0 0 0 1 'A'는 이렇게 컴퓨터에 저장된 것

==============================================================================
연산자 워밍엄
연산자(...er/or): ~하는 장치,도구, 하는애
연산자 = 은 자바에서 수학처럼 동등함을 표시하는게 아님
대입연산자 = 는
『피연산자2 = 피연산자1』
  피연산자2 ←←←←←피연산자1 이 진행방식임.
  【오른쪽에 있는 것을 왼쪽에 담아라】
  【=이 있으면 무조건 오른쪽 부터 볼 것!!!】

위의 int num=20; 은 num이랑 20은 같다(<-이건 수학임) ★땡!!!!! 잘못된 습관★
     진짜 의미: int형 타입 변수num에 20을 넣는다.
○상수와 형 변환
상수는 존재 의미가 없어지면 가비지컬랙터에 의해 소멸된다.
