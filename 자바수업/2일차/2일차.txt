자바는 컴파일러가 핵심임
java.exe -> 자바 런처
javac.exe -> 자바 컴파일러 (자바 바이트 코드로 변환해줌)

인터프리터:코드를 한줄씩 읽음

런처가 실행시키는 파일은 클래스파일임


JDK설치하면 JVM이 설치됨
자바 프로그램은 운영체제에 독립적
자바 가상머신은 운영체제에 의존적
ex)os가 바뀌면 따라 바뀜 , Linux JVM/Windows JVM


윈도우에서 만든 (테트리스)는 맥OS,유닉스에서 돌아갈까?
A:아니요
정답: 언어마다 다름

Why?	
운영체제마다 디바이스와 소통하는 방식과 규칙이 다름
맥os와 윈도우가 필요해 하는 드라이버가 다름	





하드웨어(메인보드위에 그래픽카드 램....부착) 구축->운영체제 




예전엔 드라이버를 설치했었음-> 지금은 운영체제가 알아서 설치해줌
드라이버의 역할: 운영체제한테 알려줌(상세 조사할것)

운영체제:돌아가는 프로그램끼리의 교통정리를 담당



우리가 작성하는 결과물 ------------->>>자바 컴파일러(변환 해줌) ------------------->JVM(자바 가상머신)위에서 돌림




자바는 탄생이 느린 언어였지만, Run Anywhere!라는 걸로 혁신적으로 다가옴
특정한 플랫폼(운영체제)에 돌아가는 프로그램을 만들 필요가 없어짐 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
.java
.class

java로 써서 class로 배포 
java ->class (컴파일러의 역할 -인터프리터 바이트코드 변환역할을 내포)


java 런처 - 클래스 파일 실행 시킴



실행하려면 해당 폴더에 있어야하는데 없으면 운영체제에서
path(경로)에서 탐색하게됨

자바홈


cmd - 명령프롬프트 호출/도스창/cmd창/콘솔창
cd = change directory
cd.. 상위디렉토리로 올라간다


웹: http://www..../...../.....
ex) http://www.대학교.ac.kr
           작은거->큰거-> 더큰거

디렉터리: c:\aaa\vvv\ccc\ddd\
          큰거->작은거->더작은거

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
JVM이 속도저하 유발?X
개발중인 소프트웨어의 90%이상은 인터넷, 네트워크 기반 소프트웨어이다.
인터넷,네트워크상에서는 소프트웨어의 속도보다 데이터의 전송속도가 더중요.
속도 문제는 대부분 데이터베이스와 관련 -> 데이터베이스 쪽 해결해야함



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
함수 != 메서드 인 이유
:
함수() 독립적 가능
메서드() 꼭 class안에 있어야 함


클래스는 설계한다
메서드는 정의한다
변수는 선언한다


메인 메서드는 중요함!
main() 이라는 이름을 가진 메소드는 자바 인퍼트리터가 처음 찾는 메소드

main(  )
{  
	//기능,동작,행위
	//공구상자.망치("못");
	//구급약통.내복약.감기약();
	//구급약통.외용약.후시딘();

}


주석문(Comment): 컴파일러가 눈에 안보이는 형태의 코드
주석문은 최대한 친절하게 

// 단일행 주석문 (문장의 앞에) 

/*   

다중행 주석문 처리
*/




EditPlus 설정후 ctrl 1 컴파일, ctrl 2 실행

// - 자바 프로그램의 클래스 이름은 첫글자를 『대문자』로 시작해야함(必)
/* - 자바 프로그램 시작할때 클래스(class)와 main()메소드를 기본적으로 작성할 것*/
// - 소스코드 저장 시 클래스 이름과 동일한 파일 이름으로 저장

