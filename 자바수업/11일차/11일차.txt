6장[메소드와 변수의 스코프]
■메소드
□메소드에 대한 이해
우리는 메소드는 곧 함수라고 배워왔음, 그러나 차이점은 메소드는 반드시 클래스 안에 있어야함!
메소드 형태 :이름()
메소드는 정의하고 호출한다고 말한다.  //변수는 선언, 클래스는 설계

※main메소드 특징
	이름을 내맘대로 바꿀수 없다
	메소드 중괄호 내에 존재하는 문장들이 위 → 아래로 순차적 실행
	왜 항상 『메인』일까???
	프로그램이 실행 시 인터프리터가 제일 먼저 찾음
	메인메소드의 시작은 프로그램의 시작, 메인메소드의 끝은 프로그램의 끝이다.

메소드끼리의 위치는 상관 없음	 어떤 메소드가 어디에 있던간에 인터프리터는 메인부터 찾음
main()										hiEveryone()			
hiEveryone()								main()
-------------------------------------------------------------------------------------------
매개변수 = 메소드가 필요한 걸 전달해주는 영역
매개변수는 없어도 되고, 하나만 있어도 되고, 많아도 됨
ex)
	메소드(넘겨줘야 하는것)					//괄호안이 매개변수     //메소드(행위,기능,동작을 담당)
	hiEveryone(int age)						//◇주의: hiEveryone(int age,height) [X]   / hiEveryone(int age, int height)[O]
	사과판매(사과)
	피아노옮겨주는기능메소드(피아노)

--------------------------------------------------------------------------------------------
메소드를 두가지로 나눠 살펴 볼 것인데, ①반환값이 없는것과 ②있는것을 살펴볼 거임
※①아무것도 두고가지 않는 메소드
특정한 값을 반환하지 않을때는 void를 붙이기로 함

◆ 
①아무것도 두고가지 않는 메소드
□[void] 반환값 없으며 매개변수가 하나인 예제)
	hiEveryone(12)			// 호출 ,잠깐와서 실행하고감,버튼을 누르면(호출하면) 기능 수행후 돌아감
				     			//	사용 마다 호출해야함(띵동을 누르면 호출되고 일하면 돌아감 또 필요하면 또 호출)

	public static void hiEveryone(int age)
	{
		System.out.println("좋은 아침입니다.");
		System.out.println("제 나이는"+age+"세입니다.");
	}

□[void] 반환값 없으며 매개변수가 매개변수 2개인 예제와  /  매개변수가 없는(0개) 예제)
	public static void main(String[] args)
	{
		double myHeight=179.5;
		hiEveryone(12, 12.5);	
		hiEveryone(13, myHeight); ←★가능  //이름이 키티여도 작업하는 사람끼린 필요하에 이눔시끼라 부르는거 가능	
		byeEveryone();
	}
	public static void hiEveryone(int age, double height)
	{
		System.out.println("좋은 아침입니다.");
		System.out.println("제 나이는"+age+"세입니다.");
		System.out.println("제 키는"+height+"cm입니다.");
	}

	public static void byeEveryone() ←★전달되는 것 없음, 넘겨주는 것 없이 일 시켜야함★
	{
		System.out.println("다음에 뵙겠습니다.");
	}

◆
※②값을 반환하는 메소드
반환자료형 명시
→반환자료형 메소드()	// 반환자료형은 쉽게 말해 ★남겨두는것★이라고 이해하면 편함
ex)							//공간을 확보하는 것 (메소드를 부르는 곳에선 적어도 알고 불러라)
	int hiEveryone		//냉장고를 가져오려는데 냉장고 놓을 공간이 없으면 못가져오지 않을까?	
	double hiEveryone		//아아를 한컵만큼 부어주려는데 선생님한테 담아놓을 컵이나 사발 등 아무것도 없으면 손에 쏟고 가버릴수있음
							
반환자료형
↓
int sum(int num1, int num2)
{
	int result=0;
	result = num1 +num2;
	return result;	//1.값의 반환2.메소드 종료
}







■변수의 스코프
스코프, 생명 주기, life cycle, 가시성
선언된 지역을 벗어나면 변수는 자동 소멸된다(가비지 컬랙터가 어딜 지나느냐에따라 다르지만 일단 이렇게 봐도 무방)









■메소드의 재귀호출(다시 돌아가게끔 호출)  다시(재) / 돌아갈 (귀)
앞으로 자료구조와 알고리즘을 꾸준히 공부하게 될텐데
두번째 벽이라고 느낄 재귀를 미리 이해해보자면

코드를 복사해서 실행하는 형식!

★재귀의 늪에 빠지지 않으려면 들어가는 것 만큼 벗어나는게 중요함

























★★★★★★★★★★★★★★★★★★7장[클래스와 인스턴스]★★★★★★★★★★★★★★★★★★★★★★★★
★★★★★★★★★★★★★★★★★★많이 중요 한가봄 많이 강조하심★★★★★★★★★★★★★★★★★★★★
객체지향은 한 문장으로 일목요연하게 정의가 안되며 반복 학습을 통해 개념의 이해도를 확장 시켜나가야 함
오늘은 객체지향에서 중요한 클래스와 인스턴스부터 시작할 것 

객체지향 프로그래밍 기법
(객체중심 프로그래밍 기법)

객체지향 프로그래밍 언어
(객체중심 프로그래밍 언어)
--------

?????객체란 무엇인가???????????    ※주체 vs 객체의 객체아님, 객체는 이렇게 좁은범위가 아님
	 =====
Object(객체)
현실에 존재하는 모든 것 
            
객체지향 프로그래밍
≒ 존재하는 모든것의 관계를 통해 프로그래밍을 해나가는 구조

			     				 속성(상태값:보드마커의 질량,무게,재질,잉크,색상,미세먼지...) (필요한걸 갖다 쓸 예정)
									↓ 기능(행위,속성의 값을 다르게 만듬) (보드마커의 뚜껑을 여는 행위, 뚜껑을 닫는행위...)
									↓   ↓
객체의 설계도를 구성 하는 것: 속성 기능
       클래스를 구성 하는 것: 변수 메소드
      (클래스는 설계도,붕어빵기계틀 등으로 표현되기도함)


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
<클래스와 인스턴스생성>
□	클래스는 붕어빵 기계틀처럼 설계도 라고 불리운다.
	클래스라는 설계도를 통해 우리는 객체를 생성 할 수 있다.

□	클래스 → 설계
	객체   → 생성(인스턴스 생성)
	★★★설계도만 있어선 안됨 설계도를 기반으로 객체를 생성해야함★★★
	★★★메모리에 퍼올려준후 생성해줘야 『실체화』 된 것(→인스턴스생성)★★★
	new BufferedReader   	//메모리에 퍼올려줘
	BufferedReader();			//생성자 생성
	new BufferedReader();	//인스턴스 생성


□	FruitSeller fs1= new FruitSeller();			ex)역삼역 		 2번출구 과일장수
	FruitSeller fs2= new FruitSeller();			ex)홍대입구역	 4번출구 과일장수
	같은 설계도를 사용해서 만들어도 다른객체(인스턴스) 존재 가능 

□같은 설계도를 사용해서 만들지만, 다른 설정 값을 주고 싶음.
	ex)같은 기계틀로 만든 붕어빵 같이  더욱 더 바삭하게 만들고 싶을 수도 있고 ,팥을 추가 하고 싶을 수 있음
	가격 1200 갯수10  돈0 이렇게 설정이 돼있는데,
		↓
	FruitSeller fs1= new FruitSeller();      		//이런식으로 설정가능
	fs1.세팅(1500, 40, 50000);

□생성과 동시에 초기화 FruitSeller fs1= new FruitSeller(1500, 40, 50000); 
			
	★★★//생.성.자  → 메소드//★★★ 			★특징★	
	FruitSeller(가격, 갯수, 돈)  	 	// 클래스 이름과 똑같음
	{
  											//인스턴스 생성시 생성자 딱 한번만 호출됨,			 
      										//final변수도 초기화 가능한 특권이 있음
	}


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ






FruitSeller fs1= new FruitSeller(1500, 40, 50000);			ex)역삼역 과일장수
FruitSeller fs2= new FruitSeller(1200, 10, 10000);			ex)홍대입구역 과일장수

public void buyApple(FruitSeller seller,int money)
                     ------------------
			어떤 사과 장수인지?

FruitSeller 유동현= new FruitSeller(1500, 40, 50000);			ex)역삼역 과일장수
FruitSeller 최동현= new FruitSeller(1200, 10, 10000);


FruitSeller 최나윤= new FruitSeller();
최나윤.buyApple(유동현,3000);


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
참조변수:주소를 가리키는

int n =10;n값
FruitSeller seller = new FruitSeller();seller주소
1.클래스(설계도)메모리에 퍼올린다. 2.생성자(메소드)를 호출한다 3. 실제로 사용할수 있는 클래스인 참조변수를 이름으로 가지는 객체 생성

br.readLine();

sc.next();

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

8장[클래스 패스]
9장[접근제어자]